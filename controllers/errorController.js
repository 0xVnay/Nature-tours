const AppError = require("../utilities/appError");

const handleCastErrorDB = err => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};

const handleDuplicateFielsDB = err => {
  const message = `Duplicate field value: '${err.keyValue.name}'. Please enter another value`;
  return new AppError(message, 400);
};

const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);

  const message = `Invalid input data. ${errors.join(". ")}`;
  return new AppError(message, 400);
};

const handleJWTError = () =>
  new AppError("Invalid token. Please login again", 401);

const handleJWTExpiredError = () =>
  new AppError("Your token has expired. Please login again", 401);

const sendErrorDev = (err, req, res) => {
  // A) API
  if (req.originalUrl.startsWith("/api")) {
    return res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack
    });
  }
  // B) RENDERED WEBSITE
  console.log("ERROR ðŸ’£", err);

  return res.status(err.statusCode).render("error", {
    title: "Something went wrong!",
    message: err.message
  });
};

const sendErrorProd = (err, req, res) => {
  // A) API
  if (req.originalUrl.startsWith("/api")) {
    // all the errors that are operational errors are created using appError utility
    // class and has a isOperational property or they are errors generated by
    // the mongoose library(ex: searching for invalid ID, creating invalid documents)
    // So in production we only show operational errors and not the errors
    // originated due to programming mistakes. For the latter case in production we
    // send a generic 500 code and log the error for developers.

    // a) Operational,trusted error: send message to client
    if (err.isOperational) {
      res.status(err.statusCode).json({
        status: err.status,
        message: err.message
      });
    }
    // b) Programming or other unknown error: don't leak error details
    // 1) Log error
    console.log("ERROR ðŸ’£", err);
    // 2) Send generic message
    res.status(500).json({
      status: "error",
      message: "Something went very wrong"
    });
  }

  // B) RENDERED WEBSITE
  // a) Operational,trusted error: send message to client

  if (err.isOperational) {
    res.status(err.statusCode).render("error", {
      title: "Something went wrong!",
      message: err.message
    });
  }
  // Programming or other unknown error: don't leak error details
  // 1) Log error
  console.log("ERROR ðŸ’£", err);
  // 2) Send generic message
  res.status(500).json({
    status: "error",
    message: "Please try again later"
  });
};

module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "fail";

  if (process.env.NODE_ENV === "development") {
    sendErrorDev(err, req, res);
  } else if (process.env.NODE_ENV === "production") {
    let error = { ...err };
    error.message = err.message;
    // for functions below
    // input: wierd error generated by mongoose or mongoDB
    // output: operational error generated by appError which is easily readable
    // to the client.
    if (err.name === "CastError") {
      error = handleCastErrorDB(error);
    }
    if (err.code === 11000) {
      error = handleDuplicateFielsDB(error);
    }
    if (err.name === "ValidationError") {
      error = handleValidationErrorDB(error);
    }
    if (err.name === "JsonWebTokenError") {
      error = handleJWTError();
    }
    if (err.name === "TokenExpiredError") {
      error = handleJWTExpiredError();
    }

    sendErrorProd(error, req, res);
  }
};
